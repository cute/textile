#!/bin/bash

# This is a simple script written to integrate textile merge
# capability with git mergetool.  The idea is that git will try
# its best to merge the files.  When it fails, you call this to
# give textile a crack at it.
#
#   git mergetool -t textile
#
# I like to see how each conflict was handled.  To support this,
# the script copies the original output from git with conflict
# markers.  It also makes a copy of the output of the textile
# run.
#
# The following configuration in ~/.gitconfig supports running
# this script:
#
# [mergetool "textile"]
# 	cmd = "textile $BASE $LOCAL $REMOTE $MERGED"
# 	trustExitCode = false

export PATH=/usr/local/bin:$PATH

# If a pre-process script is defined in the environment, run it.
if [ "$MERGETOOL_PREPROCESS" ]
then
    "$MERGETOOL_PREPROCESS" ${1+"$@"}
fi

# Try normal merge.  Maybe the preprocess step improved the situation.
cp "$4" "$4".conflicted_git
if diff3 -am "$2" "$1" "$3" > "$4"
then
    exit
fi

# If there are still conflicts, try a merge using textile merge.
cp "$4" "$4".conflicted_preprocessed
if diff3 -am --inline-merge "$2" "$1" "$3" > "$4"
then
    exit
fi

# Merge it manually.  You may want to use a different merge tool.
cp "$4" "$4".conflicted_textile
gvimdiff "$4"{,.conflicted_preprocessed}
